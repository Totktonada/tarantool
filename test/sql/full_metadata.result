-- test-run result file version 2
netbox = require('net.box')
 | ---
 | ...
test_run = require('test_run').new()
 | ---
 | ...

box.execute("CREATE TABLE t (id INT PRIMARY KEY AUTOINCREMENT, a INT NOT NULL, c TEXT COLLATE \"unicode_ci\");")
 | ---
 | - row_count: 1
 | ...
box.execute("INSERT INTO t VALUES (1, 1, 'aSd');")
 | ---
 | - row_count: 1
 | ...

remote = test_run:get_cfg('remote') == 'true'
 | ---
 | ...
execute = nil
 | ---
 | ...
test_run:cmd("setopt delimiter ';'")
 | ---
 | - true
 | ...
if remote then
    box.schema.user.grant('guest','read, write, execute', 'universe')
    box.schema.user.grant('guest', 'create', 'space')
    cn = netbox.connect(box.cfg.listen)
    execute = function(...) return cn:execute(...) end
else
    execute = function(...)
        local res, err = box.execute(...)
        if err ~= nil then
            error(err)
        end
        return res
    end
end;
 | ---
 | ...
test_run:cmd("setopt delimiter ''");
 | ---
 | - true
 | ...
execute([[SET SESSION "sql_seq_scan" = true;]])
 | ---
 | - row_count: 1
 | ...

execute([[UPDATE "_session_settings" SET "value" = true WHERE "name" = 'sql_full_metadata';]])
 | ---
 | - row_count: 1
 | ...
-- Make sure collation is presented in extended metadata.
--
execute("SELECT 'aSd' COLLATE \"unicode_ci\";")
 | ---
 | - metadata:
 |   - type: string
 |     span: '''aSd'' COLLATE "unicode_ci"'
 |     name: COLUMN_1
 |     collation: unicode_ci
 |   rows:
 |   - ['aSd']
 | ...
execute("SELECT c FROM t;")
 | ---
 | - metadata:
 |   - span: c
 |     type: string
 |     collation: unicode_ci
 |     name: c
 |     is_nullable: true
 |   rows:
 |   - ['aSd']
 | ...
execute("SELECT c COLLATE \"unicode\" FROM t;")
 | ---
 | - metadata:
 |   - type: string
 |     span: c COLLATE "unicode"
 |     name: COLUMN_1
 |     collation: unicode
 |   rows:
 |   - ['aSd']
 | ...

-- Make sure that nullability/autoincrement are presented.
--
execute("SELECT id, a, c FROM t;")
 | ---
 | - metadata:
 |   - span: id
 |     type: integer
 |     is_nullable: false
 |     name: id
 |     is_autoincrement: true
 |   - type: integer
 |     span: a
 |     name: a
 |     is_nullable: false
 |   - span: c
 |     type: string
 |     collation: unicode_ci
 |     name: c
 |     is_nullable: true
 |   rows:
 |   - [1, 1, 'aSd']
 | ...
execute("SELECT * FROM t;")
 | ---
 | - metadata:
 |   - span: id
 |     type: integer
 |     is_nullable: false
 |     name: id
 |     is_autoincrement: true
 |   - type: integer
 |     span: a
 |     name: a
 |     is_nullable: false
 |   - span: c
 |     type: string
 |     collation: unicode_ci
 |     name: c
 |     is_nullable: true
 |   rows:
 |   - [1, 1, 'aSd']
 | ...

-- Span is always set in extended metadata. Span is an original
-- expression forming result set column.
--
execute("SELECT 1 AS x;")
 | ---
 | - metadata:
 |   - type: integer
 |     span: '1'
 |     name: x
 |   rows:
 |   - [1]
 | ...
execute("SELECT *, id + 1 AS x, a AS y, c || 'abc' FROM t;")
 | ---
 | - metadata:
 |   - span: id
 |     type: integer
 |     is_nullable: false
 |     name: id
 |     is_autoincrement: true
 |   - type: integer
 |     span: a
 |     name: a
 |     is_nullable: false
 |   - span: c
 |     type: string
 |     collation: unicode_ci
 |     name: c
 |     is_nullable: true
 |   - type: integer
 |     span: id + 1
 |     name: x
 |   - type: integer
 |     span: a
 |     name: y
 |     is_nullable: false
 |   - type: string
 |     span: c || 'abc'
 |     name: COLUMN_1
 |   rows:
 |   - [1, 1, 'aSd', 2, 1, 'aSdabc']
 | ...

box.execute("CREATE VIEW v AS SELECT id + 1 AS x, a AS y, c || 'abc' FROM t;")
 | ---
 | - row_count: 1
 | ...
execute("SELECT * FROM v;")
 | ---
 | - metadata:
 |   - type: integer
 |     span: x
 |     name: x
 |   - type: integer
 |     span: y
 |     name: y
 |     is_nullable: false
 |   - type: string
 |     span: COLUMN_1
 |     name: COLUMN_1
 |   rows:
 |   - [2, 1, 'aSdabc']
 | ...
execute("SELECT x, y FROM v;")
 | ---
 | - metadata:
 |   - type: integer
 |     span: x
 |     name: x
 |   - type: integer
 |     span: y
 |     name: y
 |     is_nullable: false
 |   rows:
 |   - [2, 1]
 | ...

execute([[UPDATE "_session_settings" SET "value" = false WHERE "name" = 'sql_full_metadata';]])
 | ---
 | - row_count: 1
 | ...

test_run:cmd("setopt delimiter ';'")
 | ---
 | - true
 | ...
if remote then
    cn:close()
    box.schema.user.revoke('guest', 'read, write, execute', 'universe')
    box.schema.user.revoke('guest', 'create', 'space')
end;
 | ---
 | ...
test_run:cmd("setopt delimiter ''");
 | ---
 | - true
 | ...

box.space.v:drop()
 | ---
 | ...
box.space.t:drop()
 | ---
 | ...
